1. Базовые операции SQL.
    База данных платежной системы `billing_simple` состоит из одной таблицы `billing` следующей структуры:
    CREATE TABLE IF NOT EXISTS `billing_simple`.`billing` (
        `payer_email` VARCHAR(255) NULL,
        `recipient_email` VARCHAR(255) NULL,
        `sum` DECIMAL(18,2) NULL,
        `currency` VARCHAR(3) NULL,
        `billing_date` DATE NULL,
        `comment` TEXT NULL)
     ENGINE = InnoDB;

    1.1 Задание:
    Выведите поступления денег от пользователя с email 'vasya@mail.com'.
    В результат включите все столбцы таблицы и не меняйте порядка их вывода.

    Решение:
    SELECT * FROM billing
    WHERE payer_email='vasya@mail.com';

    1.2 Задание:
    Добавьте в таблицу одну запись о платеже со следующими значениями:
    * email плательщика: 'pasha@mail.com'
    * email получателя: 'katya@mail.com'
    * сумма: 300.00
    * валюта: 'EUR'
    * дата операции: 14.02.2016
    * комментарий: 'Valentines day present)'

    Решение:
    INSERT INTO billing
    VALUES(
    'pasha@mail.com',
    'katya@mail.com',
    '300.00', 'EUR',
    '2016-02-14',
    'Valentines day present)');

    1.3 Задание:
    Измените адрес плательщика на 'igor@mail.com' для всех записей таблицы, где адрес плательщика 'alex@mail.com'.

    Решение:
    UPDATE billing
    SET payer_email='igor@mail.com'
    WHERE payer_email='alex@mail.com';

    1.4 Задание:
    Удалите из таблицы записи, где адрес плательщика или адрес получателя установлен в неопределенное значение
    или пустую строку.

    Решение:
    DELETE FROM billing
        WHERE payer_email is NULL OR payer_email = ""
        OR recipient_email is NULL OR recipient_email = "";

2. Агрегация данных.
    1* База данных учета проектов `project_simple` состоит из одной таблицы `project` следующей структуры:
    CREATE TABLE IF NOT EXISTS `project_simple`.`project` (
        `project_name` VARCHAR(255) NULL,
        `client_name` VARCHAR(255) NULL,
        `project_start` DATE NULL,
        `project_finish` DATE NULL,
        `budget` DECIMAL(18,2) NULL)
    ENGINE = InnoDB;

    2* База данных магазина `store_simple` состоит из одной таблицы `store` следующей структуры:
    CREATE TABLE IF NOT EXISTS `store_simple`.`store` (
        `product_name` VARCHAR(255) NULL,
        `category` VARCHAR(255) NULL,
        `price` DECIMAL(18,2) NULL,
        `sold_num` INT NULL)
    ENGINE = InnoDB;

    2.1 Задание:
    Используя 1*. Выведите общее количество заказов компании.

    Решение:
    SELECT COUNT(*) FROM project;

    2.2 Задание:
    Используя 2*. Выведите количество товаров в каждой категории. Результат должен содержать два столбца:
    * название категории,
    * количество товаров в данной категории.

    Решение:
    SELECT category, COUNT(category) FROM store
    GROUP BY category;

    2.3 Задание:
    Используя 2*. Выведите 5 категорий товаров, продажи которых принесли наибольшую выручку.
    Под выручкой понимается сумма произведений стоимости товара на количество проданных единиц.
    Результат должен содержать два столбца:
    * название категории,
    * выручка от продажи товаров в данной категории.

    Решение:
    SELECT category, sum(sold_num*price) as cash FROM store
    GROUP BY category
    ORDER BY cash desc
    LIMIT 5;

    2.4 Задание:
    Используя 1*. Выведите в качестве результата одного запроса общее количество заказов,
    сумму стоимостей (бюджетов) всех проектов, средний срок исполнения заказа в днях.

    Для вычисления длительности проекта удобно использовать встроенную функцию datediff().

    Решение:
    SELECT
        COUNT(project_name) as all_project,
        SUM(budget) as all_sum,
        AVG(DATEDIFF(project_finish, project_start)) AS avg_date
    FROM project
    WHERE project_finish IS NOT NULL;

3. Выборки из нескольких источников.

    3.1 Задание:
    Выведите все позиций списка товаров принадлежащие какой-либо категории с названиями товаров и названиями категорий.
    Список должен быть отсортирован по названию товара, названию категории.
    Для соединения таблиц необходимо использовать оператор INNER JOIN.

    Решение:
    SELECT good.name AS good_name, category.name AS category_name FROM category_has_good
    INNER JOIN good
        ON good.id = category_has_good.good_id
    INNER JOIN category
        ON category.id = category_has_good.category_id
    ORDER BY good.name;

    3.2 Задание:
    Выведите список клиентов (имя, фамилия) и количество заказов данных клиентов, имеющих статус "new".

    Решение:
    SELECT
        client.first_name,
        client.last_name,
        count(status.name) AS new_sale_num
    FROM sale
        INNER JOIN client
            ON client.id = sale.client_id
        INNER JOIN status
            ON status.id = sale.status_id
    WHERE status.name='new'
    GROUP BY client.first_name, client.last_name;

    3.3 Задание:
    Выведите список товаров с названиями товаров и названиями категорий,
    в том числе товаров, не принадлежащих ни одной из категорий.

    Решение:
    SELECT
        good.name AS good_name,
        category.name AS category_name
    FROM category_has_good
        RIGHT OUTER JOIN good
            ON good.id = category_has_good.good_id
        LEFT OUTER JOIN category
            ON category.id = category_has_good.category_id
    ORDER BY good_name;

    3.4 Задание:
    Выведите список товаров с названиями категорий, в том числе товаров, не принадлежащих ни к одной из категорий,
    в том числе категорий не содержащих ни одного товара.

    Решение:
    SELECT
        good.name AS good_name,
        category.name AS category_name
    FROM category_has_good
        RIGHT OUTER JOIN category
            ON category_has_good.category_id = category.id
        LEFT OUTER JOIN good
            ON category_has_good.good_id = good.id
    UNION
    SELECT
        good.name AS good_name,
        category.name AS category_name
    FROM category_has_good
        LEFT OUTER JOIN category
            ON category_has_good.category_id = category.id
        RIGHT OUTER JOIN good
            ON category_has_good.good_id = good.id

    3.5 Задание:
    Выведите список всех источников клиентов и суммарный объем заказов по каждому источнику.
    Результат должен включать также записи для источников, по которым не было заказов.

    Решение:
    SELECT
    source.name AS source_name,
    sum(sale.sale_sum) AS sale_sum
    FROM sale
        LEFT OUTER JOIN client
            ON client.id = sale.client_id
        RIGHT OUTER JOIN source
            ON source.id = client.source_id
    GROUP BY source_name;

    3.6 Задание:
    Выведите названия товаров, которые относятся к категории 'Cakes' или фигурируют в заказах
    текущий статус которых 'delivering'. Результат не должен содержать одинаковых записей.
    В запросе необходимо использовать оператор UNION для объединения выборок по разным условиям.

    Решение:
    SELECT good.name AS good_name FROM category_has_good
        INNER JOIN category
            ON category.id = category_has_good.category_id
        INNER JOIN good
            ON good.id = category_has_good.good_id
    WHERE category.name = 'Cakes'
    UNION
    SELECT good.name AS good_name FROM sale_has_good
        INNER JOIN good
            ON good.id = sale_has_good.good_id
        INNER JOIN sale
            ON sale.id = sale_has_good.sale_id
        INNER JOIN status
            ON status.id = sale.status_id
    WHERE status.name = 'delivering';

    3.7 Задание:
    Выведите список всех категорий продуктов и количество продаж товаров, относящихся к данной категории.
    Под количеством продаж товаров подразумевается суммарное количество единиц товара данной категории,
    фигурирующих в заказах с любым статусом.

    Решение:
    SELECT
        category.name AS name,
        count(sale.id) AS sum_sale
    FROM category
        LEFT OUTER JOIN category_has_good
            ON category.id = category_has_good.category_id
        LEFT OUTER JOIN good
            ON category_has_good.good_id = good.id
        LEFT OUTER JOIN sale_has_good
            ON good.id = sale_has_good.good_id
        LEFT OUTER JOIN sale
            ON sale_has_good.sale_id = sale.id
    GROUP BY category.name;

    3.8 Задание:
    Выведите список источников, из которых не было клиентов, либо клиенты пришедшие из которых не
    совершали заказов или отказывались от заказов.
    Под клиентами, которые отказывались от заказов, необходимо понимать клиентов, у которых есть заказы,
    которые на момент выполнения запроса находятся в состоянии 'rejected'.
    В запросе необходимо использовать оператор UNION для объединения выборок по разным условиям.

    Решение:
    SELECT source.name AS source_name FROM source
    WHERE NOT EXISTS (
        SELECT * FROM client
            WHERE client.source_id = source.id)
    UNION
    SELECT source.name FROM source
        INNER JOIN client
            ON client.source_id = source.id
        INNER JOIN sale
            ON sale.client_id = client.id
        INNER JOIN status
            ON status.id = sale.status_id
    WHERE status.name = "rejected";