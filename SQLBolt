Lesson 1:
    1.1 Find the title of each film
    SELECT Title FROM movies;

    1.2 Find the director of each film
    SELECT Director FROM movies;

    1.3 Find the title and director of each film
    SELECT Title, Director FROM movies;

    1.4 Find the title and year of each film
    SELECT Title, Year FROM movies;

    1.5 Find all the information about each film
    SELECT * FROM movies;

Lesson 2:
    2.1 Find the movie with a row id of 6
    SELECT * FROM movies
        WHERE Id = 6;

    2.2 Find the movies released in the years between 2000 and 2010
    SELECT * FROM movies
        WHERE Year BETWEEN 2000 AND 2010;

    2.3 Find the movies not released in the years between 2000 and 2010
    SELECT * FROM movies
        WHERE Year NOT BETWEEN 2000 AND 2010;

    2.4 Find the first 5 Pixar movies and their release  year
    SELECT Title, Year FROM movies
    LIMIT 5;

Lesson 3:
    3.1 Find all the Toy Story movies
    SELECT * FROM movies
        WHERE Title LIKE 'Toy story%';

    3.2 Find all the movies directed by John Lasseter
    SELECT Title FROM movies
        WHERE Director = 'John Lasseter';

    3.3 Find all the movies (and director) not directed by John Lasseter
    SELECT Title FROM movies
        WHERE Director NOT LIKE 'John Lasseter';

    3.4 Find all the WALL-* movies
    SELECT Title FROM movies
        WHERE Title LIKE 'WALL-%';

Lesson 4:
    4.1 List all directors of Pixar movies (alphabetically), without duplicates
    SELECT DISTINCT Director FROM movies
    ORDER BY Director;

    4.2 List the last four Pixar movies released (ordered from most recent to least)
    SELECT * FROM movies
    ORDER BY Year DESC
    LIMIT 4;

    4.3 List the first five Pixar movies sorted alphabetically
    SELECT * FROM movies
    ORDER BY Title
    LIMIT 5;

    4.4 List the next five Pixar movies sorted alphabetically
    SELECT * FROM movies
    ORDER BY Title
    LIMIT 5 OFFSET 5;

Lesson 5:
    5.1 List all the Canadian cities and their populations
    SELECT City, Population FROM north_american_cities
        WHERE Country = 'Canada';

    5.2 Order all the cities in the United States by their latitude from north to south
    SELECT City FROM north_american_cities
        WHERE Country = 'United States'
    ORDER BY Latitude DESC;

    5.3 List all the cities west of Chicago, ordered from west to east
    SELECT City, Longitude FROM north_american_cities
        WHERE City > -87.629798
    ORDER BY Longitude;

    5.4 List the two largest cities in Mexico (by population)
    SELECT City FROM north_american_cities
        WHERE Country = 'Mexico'
    ORDER BY Population DESC
    LIMIT 2;

    5.5 List the third and fourth largest cities (by population) in the United States and their population
    SELECT City FROM north_american_cities
        WHERE Country = 'United States'
    ORDER BY Population DESC
    LIMIT 2 OFFSET 2;

Lesson 6:
    6.1 Find the domestic and international sales for each movie
    SELECT Title, Domestic_sales, International_sales FROM movies
        INNER JOIN Boxoffice
            ON Movies.Id = Boxoffice.Movie_id;

    6.2 Show the sales numbers for each movie that did better internationally rather than domestically
    SELECT Title, Domestic_sales, International_sales FROM movies
        INNER JOIN Boxoffice
            ON Movies.Id = Boxoffice.Movie_id
        WHERE International_sales > Domestic_sales;

    6.3 List all the movies by their ratings in descending order
    SELECT Title, Rating FROM movies
        INNER JOIN Boxoffice
            ON Movies.Id = Boxoffice.Movie_id
    ORDER BY Rating DESC;

lesson 7:
    7.1 Find the list of all buildings that have employees
    SELECT DISTINCT Building_name FROM Buildings
        LEFT JOIN employees
            ON Buildings.Building_name = Building
    WHERE Building IS NOT NULL;

    7.2 Find the list of all buildings and their capacity
    SELECT * FROM Buildings;

    7.3 List all buildings and the distinct employee roles in each building (including empty buildings)
    SELECT DISTINCT Building_name, Role FROM Buildings
        LEFT JOIN employees
            ON Buildings.Building_name = Building;

Lesson 8:
    8.1 Find the name and role of all employees who have not been assigned to a building
    SELECT Name, Role FROM Employees
        LEFT JOIN Buildings
            ON Employees.Building = Buildings.Building_name
    WHERE Building IS NULL;

    8.2 Find the names of the buildings that hold no employees
    SELECT Building_name FROM Buildings
        LEFT JOIN Employees
            ON Buildings.Building_name = Employees.Building
    WHERE Building IS NULL;

Lesson 9:
    9.1 List all movies and their combined sales in millions of dollars
    SELECT Title, (Domestic_sales + International_sales)/1000000 AS All_sales FROM movies
        INNER JOIN Boxoffice
            ON Movies.Id = Boxoffice.Movie_id;

    9.2 List all movies and their ratings in percent
    SELECT Title, (Rating*10) AS Rating FROM movies
        INNER JOIN Boxoffice
            ON Movies.Id = Boxoffice.Movie_id;

    9.3 List all movies that were released on even number years
    SELECT Title, Year FROM movies
        INNER JOIN Boxoffice
            ON Movies.Id = Boxoffice.Movie_id
    WHERE Year % 2 = 0;

Lesson 10:
    10.1 Find the longest time that an employee has been at the studio
    SELECT Name, MAX(Years_employed) AS Max_work FROM employees;

    10.2 For each role, find the average number of years employed by employees in that role
    SELECT Role, AVG(Years_employed) AS Average_year FROM employees
    GROUP BY Role;

    10.3 Find the total number of employee years worked in each building
    SELECT Building, SUM(Years_employed) FROM employees
    GROUP BY Building;

Lesson 11:
    11.1 Find the number of Artists in the studio (without a HAVING clause)
    SELECT Role, COUNT(Role) AS All_Artist FROM employees
    WHERE Role = 'Artist';

    11.2 Find the number of Employees of each role in the studio
    SELECT Role, COUNT(Role) All_Role FROM employees
    GROUP BY Role;

    11.3 Find the total number of years employed by all Engineers
    SELECT Role, SUM(Years_employed) AS All_Engineer FROM employees
    WHERE Role = 'Engineer';

Lesson 12:
    12.1 Find the number of movies each director has directed
    SELECT Director, COUNT(Director) AS Film_director FROM movies
    GROUP BY Director;

    12.2 Find the total domestic and international sales that can be attributed to each director
    SELECT Director, SUM(Domestic_sales + International_sales) FROM movies
        LEFT JOIN Boxoffice
            ON Movies.Id = Boxoffice.Movie_id
    GROUP BY Director;

Lesson 13:
    13.1 Add the studio's new production, Toy Story 4 to the list of movies (you can use any director)
    INSERT INTO Movies
    (Title, Director)
    VALUES ('Toy Story 4', 'John Lasseter	');

    13.2 Toy Story 4 has been released to critical acclaim! It had a rating of 8.7,
    and made 340 million domestically and 270 million internationally. Add the record to the  BoxOffice table.
    INSERT INTO Boxoffice
    (Movie_id, Rating, Domestic_sales, International_sales)
    VALUES (15, 8.7, 340000000, 270000000)

Lesson 14:
    14.1 The director for A Bug's Life is incorrect, it was actually directed by John Lasseter
    UPDATE Movies
    SET Director = 'John Lasseter'
    WHERE Title LIKE 'A Bug%';

    14.2 The year that Toy Story 2 was released is incorrect, it was actually released in 1999
    UPDATE Movies
    SET Year = '1999'
    WHERE Title = 'Toy Story 2';

    14.3 Both the title and director for Toy Story 8 is incorrect! The title should be "Toy Story 3"
    and it was directed by Lee Unkrich
    UPDATE Movies
    SET Title = 'Toy Story 3',
        Director = 'Lee Unkrich'
    WHERE Title = 'Toy Story 8';

Lesson 15:
    15.1 This database is getting too big, lets remove all movies that were released before 2005.
    DELETE FROM Movies
    WHERE Year < 2005;

    15.2 Andrew Stanton has also left the studio, so please remove all movies directed by him.
    DELETE FROM Movies
    WHERE Director = 'Andrew Stanton';

Lesson 16:
    16 Create a new table named Database with the following columns:
        - Name A string (text) describing the name of the database
        - Version A number (floating point) of the latest version of this database
        - Download_count An integer count of the number of times this database was downloaded
        This table has no constraints.
    CREATE TABLE IF NOT EXISTS Database (
        Name TEXT,
        Version FLOAT,
        Download_count INTEGER
    )

Lesson 17:
    17.1 Add a column named Aspect_ratio with a FLOAT data type to store the aspect-ratio each movie was released in.
    ALTER TABLE Movies
    ADD Aspect_ratio FLOAT;

    17.2 Add another column named Language with a TEXT data type to store the language that the movie was released in.
    Ensure that the default for this language is English.
    ALTER TABLE Movies
    ADD Language TEXT
        DEFAULT English;

Lesson 18:
    18.1 We've sadly reached the end of our lessons, lets clean up by removing the Movies table
    DROP TABLE IF EXISTS Movies;

    18.2 And drop the BoxOffice table as well
    DROP TABLE IF EXISTS BoxOffice;
